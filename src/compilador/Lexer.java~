/* The following code was generated by JFlex 1.4.3 on 22/12/21 09:06 AM */

package compilador;
import static compilador.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/12/21 09:06 AM from the specification file
 * <tt>C:/Users/Juan Pablo/OneDrive/Documentos/7mo_Semestre/Aut√≥matas/Compilador/src/compilador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\5\1\0\1\6\1\4\22\0\1\6\1\44\3\0"+
    "\1\51\1\42\1\7\1\55\1\56\1\47\1\45\1\3\1\46\1\64"+
    "\1\50\12\2\1\65\1\63\1\52\1\54\1\53\2\0\1\25\3\1"+
    "\1\67\6\1\1\30\1\37\2\1\1\35\1\1\1\41\10\1\1\57"+
    "\1\0\1\60\1\0\1\66\1\0\1\11\1\1\1\10\1\16\1\17"+
    "\1\20\1\31\1\13\1\34\2\1\1\14\1\27\1\24\1\22\1\33"+
    "\1\1\1\26\1\15\1\12\1\21\1\36\1\23\1\32\1\40\1\1"+
    "\1\61\1\43\1\62\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\5\1\6\17\2"+
    "\2\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\2\31\1\32\1\0\1\33\31\2"+
    "\1\34\3\2\1\35\1\36\1\37\1\3\1\40\1\0"+
    "\1\41\1\0\1\5\1\42\1\43\1\44\1\3\1\31"+
    "\1\45\1\46\1\45\1\0\4\2\1\47\4\2\1\50"+
    "\6\2\1\51\15\2\1\52\1\53\1\2\1\45\1\54"+
    "\2\0\2\31\1\45\1\3\2\45\1\46\1\45\1\55"+
    "\1\32\2\45\1\55\3\2\1\56\1\57\7\2\1\60"+
    "\3\2\1\61\4\2\1\62\2\2\1\63\1\2\1\64"+
    "\2\2\1\65\1\2\1\66\2\0\1\5\1\45\1\54"+
    "\1\55\1\46\1\45\1\55\1\67\1\70\6\2\1\71"+
    "\4\2\1\72\1\73\1\74\1\75\1\2\1\76\2\2"+
    "\1\77\3\2\2\54\5\2\1\100\4\2\1\101\1\102"+
    "\1\103\10\2\1\104\1\105\1\106\4\2\1\107\1\2"+
    "\1\110\1\2\1\111\1\2\1\112\2\2\1\113\1\2"+
    "\1\114\5\2\1\115\1\116\1\2\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\70\0\340\0\70\0\u0118"+
    "\0\u0150\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8"+
    "\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\70\0\70\0\u05e8"+
    "\0\u0620\0\u0658\0\70\0\70\0\70\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\u0690\0\u06c8\0\u0700\0\u0118\0\70"+
    "\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0"+
    "\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80"+
    "\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40"+
    "\0\u0c78\0\160\0\u0cb0\0\u0ce8\0\u0d20\0\70\0\70\0\70"+
    "\0\u0d58\0\u0d90\0\u0d90\0\u0d90\0\u0dc8\0\u0e00\0\70\0\70"+
    "\0\70\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88"+
    "\0\u0fc0\0\u0ff8\0\u1030\0\160\0\u1068\0\u10a0\0\u10d8\0\u1110"+
    "\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\160"+
    "\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458"+
    "\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\160\0\160\0\u15a8"+
    "\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768"+
    "\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928"+
    "\0\u1960\0\u1998\0\u19d0\0\u1a08\0\160\0\160\0\u1a40\0\u1a78"+
    "\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\160\0\u1bc8\0\u1c00"+
    "\0\u1c38\0\160\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\160\0\u1d50"+
    "\0\u1d88\0\160\0\u1dc0\0\160\0\u1df8\0\u1e30\0\160\0\u1e68"+
    "\0\160\0\u1ea0\0\u1ed8\0\u1688\0\u1f10\0\u1f48\0\u1f80\0\u1fb8"+
    "\0\u1ff0\0\u2028\0\160\0\160\0\u2060\0\u2098\0\u20d0\0\u2108"+
    "\0\u2140\0\u2178\0\160\0\u21b0\0\u21e8\0\u2220\0\u2258\0\160"+
    "\0\160\0\160\0\160\0\u2290\0\160\0\u22c8\0\u2300\0\160"+
    "\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0"+
    "\0\u24f8\0\u2530\0\160\0\u2568\0\u25a0\0\u25d8\0\u2610\0\160"+
    "\0\160\0\160\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760"+
    "\0\u2798\0\u27d0\0\160\0\160\0\160\0\u2808\0\u2840\0\u2878"+
    "\0\u28b0\0\160\0\u28e8\0\160\0\u2920\0\160\0\u2958\0\160"+
    "\0\u2990\0\u29c8\0\160\0\u2a00\0\160\0\u2a38\0\u2a70\0\u2aa8"+
    "\0\u2ae0\0\u2b18\0\160\0\160\0\u2b50\0\160";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11"+
    "\1\3\1\12\2\3\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\2\3\1\22\1\23\1\3\1\24\1\3"+
    "\1\25\1\26\1\3\1\27\3\3\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\2\1\3\71\0\2\3\5\0\32\3\24\0"+
    "\2\3\1\0\1\54\1\4\5\0\7\54\1\55\22\54"+
    "\22\0\1\56\2\0\1\55\5\0\1\7\62\0\7\57"+
    "\1\60\60\57\1\0\2\3\5\0\1\3\1\61\2\3"+
    "\1\62\25\3\24\0\2\3\1\0\2\3\5\0\11\3"+
    "\1\63\4\3\1\64\13\3\24\0\2\3\1\0\2\3"+
    "\5\0\2\3\1\65\4\3\1\66\3\3\1\67\7\3"+
    "\1\70\6\3\24\0\2\3\1\0\2\3\5\0\7\3"+
    "\1\71\2\3\1\72\17\3\24\0\2\3\1\0\2\3"+
    "\5\0\4\3\1\73\15\3\1\74\7\3\24\0\2\3"+
    "\1\0\2\3\5\0\1\3\1\75\2\3\1\76\5\3"+
    "\1\77\17\3\24\0\2\3\1\0\2\3\5\0\23\3"+
    "\1\100\6\3\24\0\2\3\1\0\2\3\5\0\23\3"+
    "\1\101\6\3\24\0\2\3\1\0\2\3\5\0\3\3"+
    "\1\102\6\3\1\103\17\3\24\0\2\3\1\0\2\3"+
    "\5\0\7\3\1\104\2\3\1\105\17\3\24\0\2\3"+
    "\1\0\2\3\5\0\1\3\1\106\10\3\1\107\17\3"+
    "\24\0\2\3\1\0\2\3\5\0\7\3\1\110\22\3"+
    "\24\0\2\3\1\0\2\3\5\0\1\3\1\111\30\3"+
    "\24\0\2\3\1\0\2\3\5\0\10\3\1\112\3\3"+
    "\1\113\2\3\1\114\12\3\24\0\2\3\1\0\2\3"+
    "\5\0\12\3\1\115\17\3\24\0\2\3\42\0\1\116"+
    "\70\0\1\117\100\0\1\120\15\0\1\121\42\0\1\122"+
    "\1\123\23\0\1\121\42\0\1\123\1\124\67\0\1\125"+
    "\1\126\74\0\1\127\67\0\1\130\67\0\1\131\14\0"+
    "\2\54\5\0\32\54\25\0\1\54\1\0\1\54\1\132"+
    "\5\0\7\54\1\133\22\54\3\0\2\134\20\0\1\133"+
    "\2\0\1\135\14\0\1\136\44\0\1\137\2\0\1\136"+
    "\1\0\2\3\5\0\2\3\1\140\27\3\24\0\2\3"+
    "\1\0\2\3\5\0\1\3\1\141\30\3\24\0\2\3"+
    "\1\0\2\3\5\0\16\3\1\142\13\3\24\0\2\3"+
    "\1\0\2\3\5\0\11\3\1\143\16\3\1\144\1\3"+
    "\24\0\2\3\1\0\2\3\5\0\12\3\1\145\17\3"+
    "\24\0\2\3\1\0\2\3\5\0\2\3\1\146\27\3"+
    "\24\0\2\3\1\0\2\3\5\0\24\3\1\147\5\3"+
    "\24\0\2\3\1\0\2\3\5\0\7\3\1\150\22\3"+
    "\24\0\2\3\1\0\2\3\5\0\10\3\1\151\21\3"+
    "\24\0\2\3\1\0\2\3\5\0\13\3\1\152\16\3"+
    "\24\0\2\3\1\0\2\3\5\0\5\3\1\153\24\3"+
    "\24\0\2\3\1\0\2\3\5\0\1\154\1\155\30\3"+
    "\24\0\2\3\1\0\2\3\5\0\4\3\1\156\25\3"+
    "\24\0\2\3\1\0\2\3\5\0\1\3\1\157\30\3"+
    "\24\0\2\3\1\0\2\3\5\0\16\3\1\160\13\3"+
    "\24\0\2\3\1\0\2\3\5\0\15\3\1\161\2\3"+
    "\1\162\11\3\24\0\2\3\1\0\2\3\5\0\2\3"+
    "\1\163\27\3\24\0\2\3\1\0\2\3\5\0\24\3"+
    "\1\164\5\3\24\0\2\3\1\0\2\3\5\0\16\3"+
    "\1\165\13\3\24\0\2\3\1\0\2\3\5\0\2\3"+
    "\1\166\27\3\24\0\2\3\1\0\2\3\5\0\2\3"+
    "\1\167\27\3\24\0\2\3\1\0\2\3\5\0\24\3"+
    "\1\170\5\3\24\0\2\3\1\0\2\3\5\0\2\3"+
    "\1\171\23\3\1\172\3\3\24\0\2\3\1\0\2\3"+
    "\5\0\2\3\1\173\27\3\24\0\2\3\1\0\2\3"+
    "\5\0\16\3\1\174\13\3\24\0\2\3\1\0\2\3"+
    "\5\0\2\3\1\175\16\3\1\176\10\3\24\0\2\3"+
    "\1\0\2\3\5\0\23\3\1\177\6\3\24\0\2\3"+
    "\1\0\2\3\5\0\24\3\1\200\5\3\24\0\2\3"+
    "\2\0\1\121\14\0\1\201\44\0\1\56\2\0\1\201"+
    "\2\0\1\202\42\0\2\123\21\0\46\125\1\203\1\204"+
    "\20\125\5\126\1\0\62\126\1\0\1\54\1\132\5\0"+
    "\7\54\1\205\22\54\25\0\1\205\1\0\1\54\1\206"+
    "\5\0\7\54\1\133\22\54\3\0\2\207\20\0\1\133"+
    "\2\0\1\210\14\0\1\211\25\0\2\212\20\0\1\211"+
    "\2\0\1\213\14\0\1\214\44\0\1\215\2\0\1\214"+
    "\2\0\1\216\14\0\1\217\25\0\2\220\20\0\1\217"+
    "\2\0\1\221\61\0\1\137\4\0\2\3\5\0\1\222"+
    "\31\3\24\0\2\3\1\0\2\3\5\0\5\3\1\223"+
    "\24\3\24\0\2\3\1\0\2\3\5\0\14\3\1\224"+
    "\15\3\24\0\2\3\1\0\2\3\5\0\7\3\1\225"+
    "\22\3\24\0\2\3\1\0\2\3\5\0\23\3\1\226"+
    "\6\3\24\0\2\3\1\0\2\3\5\0\15\3\1\227"+
    "\7\3\1\230\1\3\1\231\2\3\24\0\2\3\1\0"+
    "\2\3\5\0\2\3\1\232\27\3\24\0\2\3\1\0"+
    "\2\3\5\0\7\3\1\233\22\3\24\0\2\3\1\0"+
    "\2\3\5\0\1\3\1\234\30\3\24\0\2\3\1\0"+
    "\2\3\5\0\14\3\1\235\15\3\24\0\2\3\1\0"+
    "\2\3\5\0\7\3\1\236\22\3\24\0\2\3\1\0"+
    "\2\3\5\0\7\3\1\237\22\3\24\0\2\3\1\0"+
    "\2\3\5\0\1\240\31\3\24\0\2\3\1\0\2\3"+
    "\5\0\5\3\1\241\24\3\24\0\2\3\1\0\2\3"+
    "\5\0\21\3\1\242\10\3\24\0\2\3\1\0\2\3"+
    "\5\0\16\3\1\243\13\3\24\0\2\3\1\0\2\3"+
    "\5\0\7\3\1\244\22\3\24\0\2\3\1\0\2\3"+
    "\5\0\24\3\1\245\5\3\24\0\2\3\1\0\2\3"+
    "\5\0\4\3\1\246\25\3\24\0\2\3\1\0\2\3"+
    "\5\0\6\3\1\247\23\3\24\0\2\3\1\0\2\3"+
    "\5\0\11\3\1\250\20\3\24\0\2\3\1\0\2\3"+
    "\5\0\1\3\1\251\30\3\24\0\2\3\1\0\2\3"+
    "\5\0\14\3\1\252\15\3\24\0\2\3\1\0\2\3"+
    "\5\0\12\3\1\253\17\3\24\0\2\3\1\0\2\3"+
    "\5\0\7\3\1\254\22\3\24\0\2\3\1\0\2\3"+
    "\5\0\15\3\1\255\7\3\1\256\4\3\24\0\2\3"+
    "\1\0\2\3\5\0\2\3\1\257\27\3\24\0\2\3"+
    "\1\0\2\3\5\0\7\3\1\260\22\3\24\0\2\3"+
    "\1\0\2\3\5\0\6\3\1\261\23\3\24\0\2\3"+
    "\2\0\1\210\14\0\1\217\25\0\2\134\20\0\1\217"+
    "\2\0\1\202\14\0\1\262\44\0\1\263\2\0\1\262"+
    "\46\125\1\203\1\264\66\125\1\0\1\204\20\125\1\0"+
    "\1\54\1\206\5\0\7\54\1\205\22\54\3\0\2\265"+
    "\20\0\1\205\1\0\1\54\1\206\5\0\7\54\1\205"+
    "\22\54\25\0\1\205\2\0\1\265\14\0\1\211\25\0"+
    "\2\207\20\0\1\211\2\0\1\210\14\0\1\211\47\0"+
    "\1\211\2\0\1\265\14\0\1\211\25\0\2\265\20\0"+
    "\1\211\2\0\1\266\14\0\1\211\25\0\2\212\20\0"+
    "\1\211\2\0\1\213\14\0\1\214\44\0\1\267\2\0"+
    "\1\214\2\0\1\270\14\0\1\217\25\0\2\271\20\0"+
    "\1\217\2\0\1\272\61\0\1\215\5\0\1\216\14\0"+
    "\1\211\47\0\1\211\2\0\1\265\14\0\1\217\25\0"+
    "\2\207\20\0\1\217\2\0\1\216\14\0\1\211\25\0"+
    "\2\207\20\0\1\211\2\0\1\267\61\0\1\215\4\0"+
    "\2\3\5\0\3\3\1\273\26\3\24\0\2\3\1\0"+
    "\2\3\5\0\5\3\1\274\24\3\24\0\2\3\1\0"+
    "\2\3\5\0\20\3\1\275\10\3\1\276\24\0\2\3"+
    "\1\0\2\3\5\0\14\3\1\277\15\3\24\0\2\3"+
    "\1\0\2\3\5\0\12\3\1\300\17\3\24\0\2\3"+
    "\1\0\2\3\5\0\12\3\1\301\17\3\24\0\2\3"+
    "\1\0\2\3\5\0\1\302\31\3\24\0\2\3\1\0"+
    "\2\3\5\0\6\3\1\303\23\3\24\0\2\3\1\0"+
    "\2\3\5\0\11\3\1\304\20\3\24\0\2\3\1\0"+
    "\2\3\5\0\15\3\1\305\2\3\1\306\11\3\24\0"+
    "\2\3\1\0\2\3\5\0\23\3\1\307\6\3\24\0"+
    "\2\3\1\0\2\3\5\0\2\3\1\310\27\3\24\0"+
    "\2\3\1\0\2\3\5\0\7\3\1\311\22\3\24\0"+
    "\2\3\1\0\2\3\5\0\17\3\1\312\12\3\24\0"+
    "\2\3\1\0\2\3\5\0\21\3\1\313\10\3\24\0"+
    "\2\3\1\0\2\3\5\0\12\3\1\314\17\3\24\0"+
    "\2\3\1\0\2\3\5\0\7\3\1\315\22\3\24\0"+
    "\2\3\1\0\2\3\5\0\16\3\1\316\13\3\24\0"+
    "\2\3\1\0\2\3\5\0\2\3\1\317\27\3\24\0"+
    "\2\3\1\0\2\3\5\0\16\3\1\320\13\3\24\0"+
    "\2\3\1\0\2\3\5\0\14\3\1\321\15\3\24\0"+
    "\2\3\1\0\2\3\5\0\12\3\1\322\17\3\24\0"+
    "\2\3\1\0\2\3\5\0\16\3\1\323\13\3\24\0"+
    "\2\3\2\0\1\324\42\0\2\262\23\0\1\325\67\0"+
    "\1\265\14\0\1\211\47\0\1\211\2\0\1\266\14\0"+
    "\1\211\47\0\1\211\2\0\1\267\61\0\1\267\5\0"+
    "\1\270\14\0\1\211\47\0\1\211\2\0\1\270\14\0"+
    "\1\211\25\0\2\212\20\0\1\211\2\0\1\272\61\0"+
    "\1\137\4\0\2\3\5\0\7\3\1\326\22\3\24\0"+
    "\2\3\1\0\2\3\5\0\24\3\1\327\5\3\24\0"+
    "\2\3\1\0\2\3\5\0\21\3\1\330\10\3\24\0"+
    "\2\3\1\0\2\3\5\0\5\3\1\331\24\3\24\0"+
    "\2\3\1\0\2\3\5\0\2\3\1\332\27\3\24\0"+
    "\2\3\1\0\2\3\5\0\3\3\1\333\26\3\24\0"+
    "\2\3\1\0\2\3\5\0\4\3\1\334\25\3\24\0"+
    "\2\3\1\0\2\3\5\0\16\3\1\335\13\3\24\0"+
    "\2\3\1\0\2\3\5\0\7\3\1\336\22\3\24\0"+
    "\2\3\1\0\2\3\5\0\2\3\1\337\27\3\24\0"+
    "\2\3\1\0\2\3\5\0\14\3\1\340\15\3\24\0"+
    "\2\3\1\0\2\3\5\0\14\3\1\341\15\3\24\0"+
    "\2\3\1\0\2\3\5\0\7\3\1\342\22\3\24\0"+
    "\2\3\1\0\2\3\5\0\21\3\1\343\10\3\24\0"+
    "\2\3\1\0\2\3\5\0\5\3\1\344\24\3\24\0"+
    "\2\3\1\0\2\3\5\0\16\3\1\345\13\3\24\0"+
    "\2\3\2\0\1\324\67\0\1\325\14\0\1\262\47\0"+
    "\1\262\1\0\2\3\5\0\10\3\1\346\21\3\24\0"+
    "\2\3\1\0\2\3\5\0\21\3\1\347\10\3\24\0"+
    "\2\3\1\0\2\3\5\0\4\3\1\350\25\3\24\0"+
    "\2\3\1\0\2\3\5\0\24\3\1\351\5\3\24\0"+
    "\2\3\1\0\2\3\5\0\12\3\1\352\17\3\24\0"+
    "\2\3\1\0\2\3\5\0\2\3\1\353\27\3\24\0"+
    "\2\3\1\0\2\3\5\0\17\3\1\354\12\3\24\0"+
    "\2\3\1\0\2\3\5\0\21\3\1\355\10\3\24\0"+
    "\2\3\1\0\2\3\5\0\24\3\1\356\5\3\24\0"+
    "\2\3\1\0\2\3\5\0\4\3\1\357\25\3\24\0"+
    "\2\3\1\0\2\3\5\0\24\3\1\360\5\3\24\0"+
    "\2\3\1\0\2\3\5\0\11\3\1\361\20\3\24\0"+
    "\2\3\1\0\2\3\5\0\2\3\1\362\27\3\24\0"+
    "\2\3\1\0\2\3\5\0\3\3\1\363\26\3\24\0"+
    "\2\3\1\0\2\3\5\0\7\3\1\364\22\3\24\0"+
    "\2\3\1\0\2\3\5\0\2\3\1\365\27\3\24\0"+
    "\2\3\1\0\2\3\5\0\16\3\1\366\13\3\24\0"+
    "\2\3\1\0\2\3\5\0\12\3\1\367\17\3\24\0"+
    "\2\3\1\0\2\3\5\0\7\3\1\370\22\3\24\0"+
    "\2\3\1\0\2\3\5\0\2\3\1\371\27\3\24\0"+
    "\2\3\1\0\2\3\5\0\23\3\1\372\6\3\24\0"+
    "\2\3\1\0\2\3\5\0\2\3\1\373\27\3\24\0"+
    "\2\3\1\0\2\3\5\0\24\3\1\374\5\3\24\0"+
    "\2\3\1\0\2\3\5\0\14\3\1\375\15\3\24\0"+
    "\2\3\1\0\2\3\5\0\24\3\1\376\5\3\24\0"+
    "\2\3\1\0\2\3\5\0\2\3\1\377\27\3\24\0"+
    "\2\3\1\0\2\3\5\0\12\3\1\u0100\17\3\24\0"+
    "\2\3\1\0\2\3\5\0\12\3\1\u0101\17\3\24\0"+
    "\2\3\1\0\2\3\5\0\24\3\1\u0102\5\3\24\0"+
    "\2\3\1\0\2\3\5\0\14\3\1\u0103\15\3\24\0"+
    "\2\3\1\0\2\3\5\0\14\3\1\u0104\15\3\24\0"+
    "\2\3\1\0\2\3\5\0\12\3\1\u0105\17\3\24\0"+
    "\2\3\1\0\2\3\5\0\14\3\1\u0106\15\3\24\0"+
    "\2\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11144];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\1\11\26\1\2\11"+
    "\3\1\11\11\3\1\1\0\1\11\35\1\3\11\2\1"+
    "\1\0\1\1\1\0\1\1\3\11\5\1\1\0\43\1"+
    "\2\0\55\1\2\0\123\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  public int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  public int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 70: 
          { lexeme=yytext(); return PR_DownLeg;
          }
        case 80: break;
        case 34: 
          { lexeme=yytext(); return OpRel_MenorIgual;
          }
        case 81: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 82: break;
        case 3: 
          { lexeme=yytext(); return Numero_Exact;
          }
        case 83: break;
        case 55: 
          { lexeme=yytext(); return PR_Catch;
          }
        case 84: break;
        case 45: 
          { lexeme=yytext(); return ERROR3;
          }
        case 85: break;
        case 35: 
          { lexeme=yytext(); return OpRel_MayorIgual;
          }
        case 86: break;
        case 61: 
          { lexeme=yytext(); return PR_UpLeg;
          }
        case 87: break;
        case 36: 
          { lexeme=yytext(); return OpRel_Igual;
          }
        case 88: break;
        case 30: 
          { lexeme=yytext(); return OpLog_Or;
          }
        case 89: break;
        case 42: 
          { lexeme=yytext(); return PR_Ing;
          }
        case 90: break;
        case 53: 
          { lexeme=yytext(); return PR_Part;
          }
        case 91: break;
        case 7: 
          { lexeme=yytext(); return OpLog_Not;
          }
        case 92: break;
        case 56: 
          { lexeme=yytext(); return PR_Class;
          }
        case 93: break;
        case 74: 
          { lexeme=yytext(); return PR_GetAngle;
          }
        case 94: break;
        case 46: 
          { lexeme=yytext(); return PR_True;
          }
        case 95: break;
        case 71: 
          { lexeme=yytext(); return PR_TurnLeft;
          }
        case 96: break;
        case 5: 
          { /*Ignore*/
          }
        case 97: break;
        case 31: 
          { lexeme=yytext(); return OpRel_Diferente;
          }
        case 98: break;
        case 41: 
          { lexeme=yytext(); return PR_For;
          }
        case 99: break;
        case 26: 
          { lexeme=yytext(); return ERROR2;
          }
        case 100: break;
        case 1: 
          { lexeme=yytext(); return Simbolo_Especial;
          }
        case 101: break;
        case 17: 
          { lexeme=yytext(); return OpAgrup_ParCierre;
          }
        case 102: break;
        case 54: 
          { lexeme=yytext(); return PR_Void;
          }
        case 103: break;
        case 66: 
          { lexeme=yytext(); return PR_Return;
          }
        case 104: break;
        case 59: 
          { lexeme=yytext(); return PR_False;
          }
        case 105: break;
        case 65: 
          { lexeme=yytext(); return PR_Option;
          }
        case 106: break;
        case 68: 
          { lexeme=yytext(); return PR_Default;
          }
        case 107: break;
        case 6: 
          { lexeme=yytext(); return SimbEsp_Comilla;
          }
        case 108: break;
        case 69: 
          { lexeme=yytext(); return PR_DownArm;
          }
        case 109: break;
        case 39: 
          { lexeme=yytext(); return PR_Try;
          }
        case 110: break;
        case 52: 
          { lexeme=yytext(); return PR_Move;
          }
        case 111: break;
        case 44: 
          { lexeme=yytext(); return ERROR1;
          }
        case 112: break;
        case 21: 
          { lexeme=yytext(); return OpAgrup_LlaveCierre;
          }
        case 113: break;
        case 76: 
          { lexeme=yytext(); return PR_Exeption;
          }
        case 114: break;
        case 60: 
          { lexeme=yytext(); return PR_UpArm;
          }
        case 115: break;
        case 79: 
          { lexeme=yytext(); return PR_Interruption;
          }
        case 116: break;
        case 18: 
          { lexeme=yytext(); return OpAgrup_CorchApert;
          }
        case 117: break;
        case 40: 
          { lexeme=yytext(); return PR_Def;
          }
        case 118: break;
        case 64: 
          { lexeme=yytext(); return PR_Switch;
          }
        case 119: break;
        case 29: 
          { lexeme=yytext(); return OpLog_And;
          }
        case 120: break;
        case 38: 
          { lexeme=yytext(); return Numero_Part;
          }
        case 121: break;
        case 22: 
          { lexeme=yytext(); return PuntoComa;
          }
        case 122: break;
        case 13: 
          { lexeme=yytext(); return OpRel_Menor;
          }
        case 123: break;
        case 27: 
          { lexeme=yytext(); return Cadena_texto;
          }
        case 124: break;
        case 14: 
          { lexeme=yytext(); return OpRel_Mayor;
          }
        case 125: break;
        case 58: 
          { lexeme=yytext(); return PR_Exact;
          }
        case 126: break;
        case 4: 
          { lexeme=yytext(); return SimbEsp_Coma;
          }
        case 127: break;
        case 16: 
          { lexeme=yytext(); return OpAgrup_ParApert;
          }
        case 128: break;
        case 73: 
          { lexeme=yytext(); return PR_SetMotor;
          }
        case 129: break;
        case 32: 
          { lexeme=yytext(); return Op_Incremento;
          }
        case 130: break;
        case 23: 
          { lexeme=yytext(); return SimbEsp_Punto;
          }
        case 131: break;
        case 12: 
          { lexeme=yytext(); return OpAritm_Resto;
          }
        case 132: break;
        case 24: 
          { lexeme=yytext(); return SimbEsp_DosPuntos;
          }
        case 133: break;
        case 8: 
          { lexeme=yytext(); return OpAritm_Suma;
          }
        case 134: break;
        case 43: 
          { lexeme=yytext(); return PR_Imp;
          }
        case 135: break;
        case 28: 
          { lexeme=yytext(); return PR_If;
          }
        case 136: break;
        case 67: 
          { lexeme=yytext(); return PR_Rotate;
          }
        case 137: break;
        case 25: 
          { lexeme=yytext(); return ERROR5;
          }
        case 138: break;
        case 10: 
          { lexeme=yytext(); return OpAritm_Mult;
          }
        case 139: break;
        case 62: 
          { lexeme=yytext(); return PR_While;
          }
        case 140: break;
        case 72: 
          { lexeme=yytext(); return PR_SetAngle;
          }
        case 141: break;
        case 50: 
          { lexeme=yytext(); return PR_Word;
          }
        case 142: break;
        case 77: 
          { lexeme=yytext(); return PR_SetPosition;
          }
        case 143: break;
        case 47: 
          { lexeme=yytext(); return PR_Stop;
          }
        case 144: break;
        case 20: 
          { lexeme=yytext(); return OpAgrup_LlaveApert;
          }
        case 145: break;
        case 15: 
          { lexeme=yytext(); return OpAsig;
          }
        case 146: break;
        case 19: 
          { lexeme=yytext(); return OpAgrup_CorchCierre;
          }
        case 147: break;
        case 37: 
          { lexeme=yytext(); return ERROR4;
          }
        case 148: break;
        case 33: 
          { lexeme=yytext(); return Op_Decremento;
          }
        case 149: break;
        case 48: 
          { lexeme=yytext(); return PR_Else;
          }
        case 150: break;
        case 57: 
          { lexeme=yytext(); return PR_Speed;
          }
        case 151: break;
        case 9: 
          { lexeme=yytext(); return OpAritm_Resta;
          }
        case 152: break;
        case 11: 
          { lexeme=yytext(); return OpAritm_Div;
          }
        case 153: break;
        case 75: 
          { lexeme=yytext(); return PR_TurnRight;
          }
        case 154: break;
        case 63: 
          { lexeme=yytext(); return PR_Motor;
          }
        case 155: break;
        case 49: 
          { lexeme=yytext(); return PR_Flag;
          }
        case 156: break;
        case 51: 
          { lexeme=yytext(); return PR_Main;
          }
        case 157: break;
        case 78: 
          { lexeme=yytext(); return PR_GetPosition;
          }
        case 158: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
